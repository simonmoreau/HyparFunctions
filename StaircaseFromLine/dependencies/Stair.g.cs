//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements
{
    #pragma warning disable // Disable all warnings

    /// <summary>Represents a stair.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Stair : GeometricElement
    {
        [Newtonsoft.Json.JsonConstructor]
        public Stair(double @flightNumber, double @riserNumber, double @riserHeight, double @maximumRiserHeight, double @height, Transform @transform, Material @material, Representation @representation, bool @isElementDefinition, System.Guid @id, string @name)
            : base(transform, material, representation, isElementDefinition, id, name)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Stair>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @flightNumber, @riserNumber, @riserHeight, @maximumRiserHeight, @height, @transform, @material, @representation, @isElementDefinition, @id, @name});
            }
        
            this.FlightNumber = @flightNumber;
            this.RiserNumber = @riserNumber;
            this.RiserHeight = @riserHeight;
            this.MaximumRiserHeight = @maximumRiserHeight;
            this.Height = @height;
            
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The number of run in the stair.</summary>
        [Newtonsoft.Json.JsonProperty("FlightNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FlightNumber { get; set; }
    
        /// <summary>The number of riser is calculated based on the height between levels.</summary>
        [Newtonsoft.Json.JsonProperty("RiserNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RiserNumber { get; set; }
    
        /// <summary>The riser height is calculated based on the number of riser and the Maximum Riser Height.</summary>
        [Newtonsoft.Json.JsonProperty("RiserHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RiserHeight { get; set; }
    
        /// <summary>The height that risers will not exceed when the stair run is created.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumRiserHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaximumRiserHeight { get; set; }
    
        /// <summary>The height of the stair. </summary>
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Height { get; set; }
    
    
    }
}